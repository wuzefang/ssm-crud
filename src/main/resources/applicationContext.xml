<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	
	<!-- Spring 配置文件，主要配置和业务逻辑有关的 -->
	<!-- 注解扫描 ：除了控制器 -->
	<context:component-scan base-package="com.wzf">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 数据源，事务控制。。。。 -->
	<context:property-placeholder location="classpath:JDBC.properties"/>
	
	<!-- ==============================数据源配置 ========================-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${url}"></property>
		<property name="driverClass" value="${dirverClass}"></property>
		<property name="user" value="${username}"></property>
		<property name="password" value="${password}"></property>
	</bean>
	<!-- ================================================================= -->
	
	<!-- ===========================配置和mybatis整合======================== -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- Mybatis全局配置文件的位置 -->
		<property name="configLocation"  value="classpath:mybatis.xml"></property>
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- mybatis的mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*xml"></property>
	</bean>
	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<!-- 扫描所有的com.wzf.crud.dao 下的所有dao接口的实现，加入到容器中 -->
		<property name="basePackage" value="com.wzf.crud.dao"></property>
	</bean>
	<!-- ================================================================= -->
	
	<!-- ============================配置一个批量的sqlSession================================= -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	
	<!-- ============================事务控制================================= -->
	<bean  id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 开启基于注解的事务，使用xml配置形式的事务  (重要事务的配置使用xml)-->
	<aop:config>
		<!-- 配置事务切入点 -->
		<aop:pointcut expression="execution(* com.wzf.crud.service..*(..))" id="txPoint"/>
		<!-- 引入事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	<!-- 配置事务增强，事务如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
	<!-- 不写 transaction-manager 时，DataSourceTransactionManager的id必须为  transactionManager-->
	<tx:attributes>
		<!-- 所有方法是 事务方法 -->
		<tx:method name="*"/>
		<!-- 所有以  get  开头的方法都是只读方法 -->
		<tx:method name="get*" read-only="true"/>
	</tx:attributes>
	</tx:advice>
	<!-- ===================================================================== -->
</beans>
